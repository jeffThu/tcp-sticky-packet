本例我们建立一个简单的客户端和服务器端的TCP连接。

服务器端监听本地的8888端口，并在接收到连接后启动一个处理协程来处理每个连接。服务器端使用一个固定大小的缓冲区（1024字节）来接收数据，并在接收到数据后将其打印出来。

客户端依次发送"Hello"和"World"两个消息给服务器端。由于两个消息之间没有延迟或等待时间，发送方的速度快于接收方的接受速度，可能会导致TCP粘包问题。

运行以上代码，并观察服务器端接收到的数据情况，从而体验TCP粘包问题的效果。可能会发现，服务器端接收到的数据可能会合并成一个数据块，而无法准确分辨出两个独立的消息。

peng@pengdeMacBook-Air client % go run .
Connected to server.
Sent message: Hello
Sent message: World

peng@pengdeMacBook-Air server % go run .
Server started. Listening on localhost:8888
New connection accepted.
Received data: HelloWorld


TCP粘包是指在TCP通信中，发送方发送的多个数据包被接收方一次性接收并组合成一个大数据包的现象。这种情况下，接收方可能无法正确地解析和处理接收到的数据。

TCP粘包问题可能会导致接收方在解析数据时产生混乱或错误。例如，如果发送方发送了"Hello"和"World"两个数据包，接收方可能会收到"HelloWorld"这样的数据，而无法准确地分辨出两个独立的数据包。


TCP包粘在一起后，可以用以下几种方案以正确拆分：

1. 分隔符：在数据包中使用特定的消息边界标识，接收方通过检测消息边界来划分数据包。常见的做法是在数据包中添加特定的分隔符或长度字段。

2. 固定长度：发送方将每个数据包固定为固定长度，接收方按照固定长度切分数据包。

3. 包头包尾：在数据包中添加包头和包尾信息，接收方通过解析包头和包尾来确定数据包的边界。如将消息长度作为消息的一部分发送，接收方按照消息长度进行解析


TCP粘包问题会导致以下坏处：

1. 数据解析错误：当接收方收到合并的数据包时，无法准确地区分和解析原始的小数据包。这可能导致数据解析错误，从而影响应用程序的正确性和可靠性。

2. 应用程序逻辑复杂化：在应用程序中处理TCP粘包问题可能需要额外的逻辑和代码来处理合并的数据包，包括数据拆分和重组。这增加了应用程序的复杂性和开发难度。

因此，对于需要精确控制和解析数据包边界的应用场景，应采取适当的解决方法来避免或减轻TCP粘包问题的影响。


为什么包会粘在一起：

1. 数据发送速度与接收速度不匹配

2. 网络拥塞和延迟：当网络存在拥塞或延迟时，数据包的传输可能会受到影响。在这种情况下，多个数据包可能会在传输过程中相互堆积和合并，从而引发粘包问题。
